#
#  ------------------------------------------------------------------------------
#  Author: Craig Lage, UC Davis
#  Date: Jan 19, 2015
#
#  Standalone cpp Poisson solver
#
#
# Poisson Solver configuration file

# Poisson solver constants
# These control the numerics of the Poisson solver
# They should not need to be changed
w = 1.9  			# Successive Over-Relaxation factor
ncycle = 50			# Number of smoothing cycles at each resolution
iterations = 1			# Number of VCycles

#  ------------------------------------------------------------------------------
# Overall setup - these control the size and scale of the simulated volume

ScaleFactor = 4    	   	# Power of 2 that sets the grid size
# ScaleFactor = 1 means grid size is 5/6 micron, 128 grids in the z-direction
# ScaleFactor = 2 cuts grid size by a actor of 2
# ScaleFactor = 4 cuts grid size by a actor of 4, etc. 

PixelSize = 10.0  	     	# Pixel size in microns
GridsPerPixel = 12		# Number of grids per pixel at ScaleFactor = 1
Nx = 256      			# Number of grids in x at ScaleFactor = 1
Ny = 128      			# Number of grids in y at ScaleFactor = 1

#  ------------------------------------------------------------------------------
# Voltages and Charges - these should be self-explanatory

Vbb = -50.0			# Back bias
Vparallel_lo = -8.0		# Parallel Low Voltage
Vparallel_hi = 4.0		# Parallel High Voltage
Vserial_lo = -6.0		# Serial Low Voltage
Vscupper = 5.0 		  	# Scupper voltage

BackgroundDoping = -1.0E12 	# Background doping in cm^-3
ChannelStopDoping = -3.0E12	# Channel Stop doping in cm^-2
ChannelStopDepth = 2.0		# Channel stop depth in microns
ChannelStopWidth = 2.0		# ChannelStop width in microns
ChannelDoping = 8.0E11		# Channel doping in cm^-2
ChannelDepth = 1.0		# Channel stop depth in microns
UndepletedChannelStop = 0	# 0 = No undepleted Region, 1 = undepleted Region (
Vchannelstop = 0.0		# Voltage in undepleted channel stop

#  ------------------------------------------------------------------------------
# Pixel Regions
# These allow one to set up one or more regions of regularly spaced pixels.
# Each pixel region will need its extents defined
# Within each pixel region, one can fill multiple collecting wells with arbitrary amounts of charge
NumberofPixelRegions = 1	  	  # 1
PixelRegionLowerLeft_0 = 110.0 0.0	  # 
PixelRegionUpperRight_0 = 220.0 110.0	  #
NumberofFilledWells_0 = 0		  #
CollectedCharge_0_0 = 50000	 	  # Collected charge in e-
FilledPixelCoords_0_0 = 55.0 55.0	  # (x,y) coords of pixel center
DistributedCharge = 1                     # 1=Charge is uniform over well, 0=Point charge in center

#  ------------------------------------------------------------------------------
# Added dipoles - this allows addition of dipole charges for comparison to Poisson solution

NumberofDipoles = 0		  	  # 1
DipoleCoords_0 = 55.0 55.0 		  # X and Y coordinates of dipole center (Z assumed zero) 
DipoleZLocation_0 = 1.46	  	  # Z location of dipole charge (dipole strength = 2 * charge * Z)
DipoleCharge_0 = 50000			  # Number of electrons in dipole
NumberofDipoleImages = 5		  # Number of image pairs

#  ------------------------------------------------------------------------------
# Constant Voltage Regions - this allows a number of regions of fixed surface potential
# Each Constant Voltage region will need its extents defined
NumberofFixedRegions = 2
FixedRegionLowerLeft_0 = 10.0 0.0	  # 
FixedRegionUpperRight_0 = 90.0 110.0	  #
FixedRegionVoltage_0 = 5.0		  #
FixedRegionDoping_0 = 0.0		  # Fixed region doping in cm^-2
FixedRegionChargeDepth_0 = 1.0		  # Fixed region charge depth in microns
FixedRegionLowerLeft_1 = 90.0 0.0	  # 
FixedRegionUpperRight_1 = 110.0 110.0	  #
FixedRegionVoltage_1 = -6.0		  #
FixedRegionDoping_1 = 0.0		  # Fixed region doping in cm^-2
FixedRegionChargeDepth_1 = 1.0		  # Fixed region charge depth in microns

#  ------------------------------------------------------------------------------
# Pixel Boundary Tests - This allows tracing the pixel boundaries and electron paths

LogEField = 1	 	       	      	   # 0 - don't calculate E-Field, 1 - Calculate and store E-Field
LogPixels = 1				   # 0 - don't calculate boundaries, 1 - calculate and store boundaries
LogPixelPaths = 1			   # 0 - only the final (z~0) point is logged, 1 - Entire path is logged

#  ------------------------------------------------------------------------------
# This defines the region and spacings used in the Pixel Boundary tests
PixelBoundaryLowerLeft = 120.0 30.0    	    # These values set the region over which electron paths are
PixelBoundaryUpperRight = 200.0 60.0 	    # calculated
PixelBoundaryStepSize = 0.5 0.5

#  ------------------------------------------------------------------------------
# These control the location and naming of the output
outputfiledir = data
outputfilebase 	= Edge_512
EdgePlot = 1				# Tells plot program whether it is the edge of the array
PlotEField = 0				# Tells plot program whether or not to plot E-field in Summary plot.

